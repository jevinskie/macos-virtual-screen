//
//   Generated by https://github.com/blacktop/ipsw (Version: v3.1.480, BuildCommit: c8897fa0f)
//
//    - LC_BUILD_VERSION:  Platform: macOS, MinOS: 14.3, SDK: 14.3, Tool: ld (902.8)
//    - LC_BUILD_VERSION:  Platform: macCatalyst, MinOS: 17.3, SDK: 17.3, Tool: ld (902.8)
//    - LC_SOURCE_VERSION: 1774.3.4.0.0
//
#ifndef CPZoneBorder_h
#define CPZoneBorder_h
@import Foundation;

#include "CPCopying-Protocol.h"
#include "CPPage.h"

@interface CPZoneBorder : NSObject <NSCopying, CPCopying> {
    /* instance variables */
    struct CGRect {
        struct CGPoint {
            double x;
            double y;
        } origin;
        struct CGSize {
            double width;
            double height;
        } size;
    } bounds;
    CPPage *page;
    NSMutableArray *ownerArray;
    NSMutableArray *graphicObjects;
    NSMutableArray *neighbors;
    NSMutableArray *intersections;
    _Bool isHorizontal;
    _Bool hasForwardVector;
    _Bool hasBackwardVector;
    double overhangMin;
    double overhangMax;
}

/* class methods */
+ (void)addIntersectionBetweenBorder:(id)border andBorder:(id)border atRect:(struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
})rect;
+ (int)clockwiseWindingNumberOfShapeWithBorders:(id)borders;
+ (struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
})extendRect:(struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1; })rect;
+ (void)outerVertices:(struct CGPoint {
    double x0;
    double x1;
} *)vertices fromBorders:(id)borders swollenBy:(double)by;
+ (void)removeIntersectionBetweenBorder:(id)border andBorder:(id)border;

/* instance methods */
- (void)dealloc;
- (id)copyWithZone:(struct _NSZone *)zone;
- (id)init;
- (struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
})bounds;
- (_Bool)isHorizontal;
- (_Bool)isVertical;
- (id)page;
- (void)setBounds:(struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
})bounds;
- (long long)compareYBounds:(id)ybounds;
- (void)removeFromArray;
- (void)removeLooseThreadsStartingFrom:(id)from;
- (void)setSide:(int)side ofPage:(id)page;
- (long long)compareXBounds:(id)xbounds;
- (void)addGraphicObject:(id)object;
- (void)addNeighbor:(id)neighbor;
- (void)addToArray:(id)array;
- (void)addToArray:(id)array atIndex:(unsigned int)index;
- (void)combine:(id)combine;
- (_Bool)continues:(id)continues;
- (id)copyWithoutIntersections;
- (_Bool)crosses:(id)crosses;
- (_Bool)extractCycleTo:(id)to goingForward:(_Bool)forward startingAtIndex:(unsigned int)index;
- (_Bool)extractCycleTo:(id)to goingForward:(_Bool)forward throughIntersectionIndex:(unsigned int)index returningTo:(id)to atRect:(struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
} *)rect;
- (id)getNextBorder:(unsigned int)border;
- (id)graphicObjectAtIndex:(unsigned int)index;
- (unsigned int)graphicObjectCount;
- (id)graphicObjects;
- (_Bool)hasBackwardVector;
- (_Bool)hasClockwiseVectorAtIndex:(unsigned int)index startingForward:(_Bool)forward;
- (_Bool)hasCounterclockwiseVectorAtIndex:(unsigned int)index startingForward:(_Bool)forward;
- (_Bool)hasForwardVector;
- (_Bool)hasNeighborShape:(id)shape;
- (_Bool)hasNeighborShape:(id)shape atSide:(int)side;
- (_Bool)hasVectorGoingForward:(_Bool)forward startingAtIndex:(unsigned int *)index;
- (unsigned int)indexOfIntersectionWith:(id)with;
- (id)initSuper;
- (id)initWithGraphicObject:(id)object;
- (void)instantiateVectors;
- (unsigned int)intersectionCount;
- (_Bool)intersectsWith:(id)with atRect:(struct CGRect {
    struct CGPoint {
        double x0;
        double x1;
    } x0;
    struct CGSize {
        double x0;
        double x1;
    } x1;
} *)rect;
- (id)neighborAtIndex:(unsigned int)index;
- (unsigned int)neighborCount;
- (id)ownerArray;
- (void)removeFromArrayAtIndex:(unsigned int)index;
- (void)removeGraphicObjectAtIndex:(unsigned int)index;
- (void)removeNeighborAtIndex:(unsigned int)index;
- (void)setHasBackwardVector:(_Bool)vector;
- (void)setHasForwardVector:(_Bool)vector;
- (void)trimToLastIntersections;
- (_Bool)windsClockwiseOnto:(id)onto;
- (long long)zOrder;

@end

#endif /* CPZoneBorder_h */
